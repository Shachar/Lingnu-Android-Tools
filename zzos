#!/usr/bin/perl

use Getopt::Long;
use File::Basename;

sub help
{
    print STDERR <<EOM;
zzos [options] apk...

Options:
--framework     Given APK provides framework for this APK
--output        directory where to create the extracted APK dirs. Default is current directory.
EOM
    exit 1;
}

my (@framework_names, $outdir);

$outdir=".";

GetOptions("framework=s" => \@framework_names, "output=s" => \$outdir ) or help();

my ($apkpath, $delayed_fail);
$delayed_fail=0;
while( $apkpath = shift @ARGV ) {
    # For each APK to be processed
    my $fail=0;
    my ($apkname, $apkdir ) = fileparse( $apkpath, ( ".apk" ) );

    if( $fail = process_apk( $apkpath, "$outdir/$apkname" ) ) {
        $delayed_fail = 1;
    }
}

exit $delayed_fail;

sub process_apk
{
    my ( $apkpath, $outdir ) = @_;

    # Get a list of files in the package
    if( ! open( APKLIST, "-|", "aapt", ("l", $apkpath)) ) {
        print STDERR "Failed to open $apkpath: $!\n";

        return 1;
    }

    if( !mkdir "$outdir" ) {
        print STDERR "Failed to create directory $outdir: $!\n";
        return 1;
    }

    my @ziplist;
    print "Processing $apkpath\n";
    # Scan all the files in the APK
    while( <APKLIST> ) {
        chomp;

        if( m/^resources.arsc$/ ) {
            # Do nothing. We handle this file through aapt dump resources.
            print "Skipping resources.arsc\n";
        } elsif( m'^.*\.xml$' ) {
            print "Decompiling $_\n";
        } else {
            push @ziplist, $_;
        }
    }

    system "unzip", ( "-q", $apkpath, @ziplist, "-d", $outdir );

    return 0;
}
